## Overview

Simple overview.

- Chart name: {{ .Chart.Name  }}
- Chart version: {{ .Chart.Version  }}
- App version: {{ .Chart.AppVersion  }}

More information:

- [DockerHub](https://hub.docker.com/r/senzing)
- [GitHub](https://github.com/Senzing)
- [Helm Chart](https://github.com/Senzing/charts/tree/master/charts)

## Command

The command being run:

```console
command-name.py {{ .Values.${SENZING_HELM_MAIN_OBJECT_BLOCK}.senzing.subcommand -}}
  {{- if .Values.${SENZING_HELM_MAIN_OBJECT_BLOCK}.senzing.debug }} \
  --debug "{{ .Values.${SENZING_HELM_MAIN_OBJECT_BLOCK}.senzing.debug }}"
  {{- end }}
  {{- if .Values.${SENZING_HELM_MAIN_OBJECT_BLOCK}.senzing.logLevel }} \
  --log-level "{{ .Values.${SENZING_HELM_MAIN_OBJECT_BLOCK}.senzing.logLevel }}"
  {{- end }}
```

## Metadata

{{- if .Values.diagnosticMode.enabled }}
The chart has been deployed in diagnostic mode. All probes have been disabled and the command has been overwritten with:

  command: {{- include "senzing-common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 4 }}
  args: {{- include "senzing-common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 4 }}

Get the list of pods by executing:

  kubectl get pods --namespace {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }}

Access the pod you want to debug by executing

  kubectl exec --namespace {{ .Release.Namespace }} -ti <NAME OF THE POD> -- bash

In order to replicate the container startup scripts execute this command:

    %%ENTRYPOINT and CMD from main container%%

{{- else }}

%%Instructions to access the application depending on the serviceType and other considerations%%

{{- end }}


## Metadata

{{- if .Values.ingress.enabled }}

{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ . }}
  {{- end }}
{{- end }}

{{- else if contains "NodePort" .Values.service.type }}

  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ template "senzing-common.names.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT

{{- else if contains "LoadBalancer" .Values.service.type }}

     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ template "senzing-common.names.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template "senzing-common.names.fullname" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
  echo http://$SERVICE_IP:{{ .Values.service.port }}

{{- else if contains "ClusterIP" .Values.service.type }}

## Logon

1. Example:

  ```console
  export POD_NAME=$(kubectl get pods \
    --namespace {{ .Release.Namespace }} \
    --selector "app.kubernetes.io/name={{ include "${SENZING_HELM_TEMPLATE_NAME}.name" . }}, \
                app.kubernetes.io/instance={{ .Release.Name }}" \
    --output jsonpath="{.items[0].metadata.name}")

  kubectl exec -it --namespace {{ .Release.Namespace }} ${POD_NAME} -- /bin/bash
  ```

{{- end }}


{{- include "senzing-common.warnings.rollingTag" .Values.${SENZING_HELM_MAIN_OBJECT_BLOCK}.image }}
{{- include "${SENZING_HELM_TEMPLATE_NAME}.validateValues" . }}
