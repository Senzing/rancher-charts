affinity: {}

deployment:
  metadata:
    annotations:
  spec:
    template:
      metadata:
        annotations:

fullnameOverride: ""

image:
  pullPolicy: Always
  registry: docker.io
  repository: senzing/stream-producer
  tag: latest

imagePullSecrets: []

ingress:
  annotations: {}
  enabled: false
  hosts:
    - host: chart-example.local
      paths: []
  tls: []

nameOverride: ""
nodeSelector: {}
replicaCount: 1
resources: {}

securityContext:
  enabled: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001

senzing:
  awsAccessKeyId: ""
  awsDefaultRegion: ""
  awsSecretAccessKey: ""
  awsSessionToken: ""
  azureConnectionString: ""
  azureQueueName: ""
  csvDelimiter: ""
  csvRowsInChunk: ""
  debug: ""
  defaultDataSource: ""
  defaultEntityType: ""
  delayInSeconds: ""
  inputUrl: ""
  kafkaBootstrapServerHost: ""
  kafkaBootstrapServerPort: ""
  kafkaGroup: ""
  kafkaPollInterval: ""
  kafkaTopic: ""
  monitoringPeriodInSeconds: ""
  password: ""
  rabbitmqExchange: ""
  rabbitmqHost: ""
  rabbitmqPassword: ""
  rabbitmqPort: ""
  rabbitmqQueue: ""
  rabbitmqRoutingKey: ""
  rabbitmqUseExistingEntities: ""
  rabbitmqUsername: ""
  rabbitmqVirtualHost: ""
  readQueueMaxSize: ""
  recordIdentifier: ""
  recordMax: ""
  recordMin: ""
  recordMonitor: ""
  recordSizeMax: ""
  recordsPerMessage: ""
  sleepTimeInSeconds: ""
  sqsDelaySeconds: ""
  sqsQueueUrl: ""
  subcommand: ""
  threadsPerPrint: ""

service:
  port: 80
  type: ClusterIP

tolerations: []
