## Overview

Simple overview.

- Chart name: {{ .Chart.Name  }}
- Chart version: {{ .Chart.Version  }}
- App version: {{ .Chart.AppVersion  }}

More information:

- [DockerHub](https://hub.docker.com/r/senzing/postgresql-client)
- [GitHub](https://github.com/Senzing/postgresql-client)
- [Helm Chart](https://github.com/Senzing/charts/tree/master/charts/senzing-postgresql-client)

## Command

The command being run:

```console
command-name.py {{ .Values.main.senzing.subcommand -}}
  {{- if .Values.main.senzing.debug }} \
  --debug "{{ .Values.main.senzing.debug }}"
  {{- end }}
  {{- if .Values.main.senzing.logLevel }} \
  --log-level "{{ .Values.main.senzing.logLevel }}"
  {{- end }}
```

## Access pod

{{- if .Values.diagnosticMode.enabled }}
The chart has been deployed in diagnostic mode. All probes have been disabled and the command has been overwritten with:

  command: {{- include "senzing-common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 4 }}
  args: {{- include "senzing-common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 4 }}

1. Get the list of pods by executing:

    ```console
    kubectl get pods --namespace {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }}
    ```

2. Access the pod you want to debug by executing

    ```console
    kubectl exec --namespace {{ .Release.Namespace }} -ti <NAME OF THE POD> -- bash
    ```

In order to replicate the container startup scripts execute this command:

    %%ENTRYPOINT and CMD from main container%%

{{- else }}

1. Get the list of pods by executing:

    ```console
    kubectl get pods --namespace {{ .Release.Namespace }} -l app.kubernetes.io/instance={{ .Release.Name }}
    ```

2. Access the pod you want to debug by executing

    ```console
    kubectl exec --namespace {{ .Release.Namespace }} -ti <NAME OF THE POD> -- bash
    ```

{{- end }}

## Access service

{{- if .Values.ingress.enabled }}

{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ . }}
  {{- end }}
{{- end }}

{{- else if contains "NodePort" .Values.service.type }}

  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ template "senzing-common.names.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT

{{- else if contains "LoadBalancer" .Values.service.type }}

     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ template "senzing-common.names.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template "senzing-common.names.fullname" . }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
  echo http://$SERVICE_IP:{{ .Values.service.port }}

{{- else if contains "ClusterIP" .Values.service.type }}

{{- end }}

{{- include "senzing-common.warnings.rollingTag" .Values.main.image }}
{{- include "senzing-postgresql-client.validateValues" . }}
